/* tslint:disable */
/* eslint-disable */
/**
 * Bản đồ Bến Cát
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateStreetHistoryRequestDto
 */
export interface CreateStreetHistoryRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStreetHistoryRequestDto
     */
    'historyName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetHistoryRequestDto
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateStreetImageRequestDto
 */
export interface CreateStreetImageRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStreetImageRequestDto
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetImageRequestDto
     */
    'publicId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetImageRequestDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateStreetRequestDto
 */
export interface CreateStreetRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'streetName': string;
    /**
     * 
     * @type {number}
     * @memberof CreateStreetRequestDto
     */
    'streetTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof CreateStreetRequestDto
     */
    'route'?: GeoJsonLineStringDto;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof CreateStreetRequestDto
     */
    'wayPoints'?: GeoJsonLineStringDto;
    /**
     * 
     * @type {Array<CreateStreetImageRequestDto>}
     * @memberof CreateStreetRequestDto
     */
    'streetImages'?: Array<CreateStreetImageRequestDto> | null;
}
/**
 * 
 * @export
 * @interface CreateStreetTypeRequestDto
 */
export interface CreateStreetTypeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStreetTypeRequestDto
     */
    'streetTypeName'?: string | null;
}
/**
 * 
 * @export
 * @interface GeoJsonLineStringDto
 */
export interface GeoJsonLineStringDto {
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof GeoJsonLineStringDto
     */
    'coordinates'?: Array<Array<number>> | null;
}
/**
 * 
 * @export
 * @interface UpdateStreetHistoryRequestDto
 */
export interface UpdateStreetHistoryRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetHistoryRequestDto
     */
    'historyName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetHistoryRequestDto
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateStreetImageRequestDto
 */
export interface UpdateStreetImageRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetImageRequestDto
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetImageRequestDto
     */
    'publicId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetImageRequestDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateStreetRequestDto
 */
export interface UpdateStreetRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetRequestDto
     */
    'streetName': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateStreetRequestDto
     */
    'streetTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetRequestDto
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetRequestDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetRequestDto
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof UpdateStreetRequestDto
     */
    'route'?: GeoJsonLineStringDto;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof UpdateStreetRequestDto
     */
    'wayPoints'?: GeoJsonLineStringDto;
}
/**
 * 
 * @export
 * @interface UpdateStreetTypeRequestDto
 */
export interface UpdateStreetTypeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateStreetTypeRequestDto
     */
    'streetTypeName'?: string | null;
}

/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} publicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageDeletePublicIdDelete: async (publicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('apiImageDeletePublicIdDelete', 'publicId', publicId)
            const localVarPath = `/api/image/delete/{publicId}`
                .replace(`{${"publicId"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageUploadPost: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} publicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageDeletePublicIdDelete(publicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageDeletePublicIdDelete(publicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageDeletePublicIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageUploadPost(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageUploadPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @param {string} publicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageDeletePublicIdDelete(publicId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiImageDeletePublicIdDelete(publicId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageUploadPost(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiImageUploadPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {string} publicId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageDeletePublicIdDelete(publicId: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageDeletePublicIdDelete(publicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageUploadPost(file?: File, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageUploadPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StreetApi - axios parameter creator
 * @export
 */
export const StreetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Carefully with Route and WayPoints coordinates
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetAdminCreatePost: async (createStreetRequestDto?: CreateStreetRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street/adminCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStreetRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetAdminSearchGet: async (streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street/adminSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streetName !== undefined) {
                localVarQueryParameter['StreetName'] = streetName;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['StreetType'] = streetType;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (isDecsending !== undefined) {
                localVarQueryParameter['IsDecsending'] = isDecsending;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetGet: async (streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streetName !== undefined) {
                localVarQueryParameter['StreetName'] = streetName;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['StreetType'] = streetType;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (isDecsending !== undefined) {
                localVarQueryParameter['IsDecsending'] = isDecsending;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetIdDelete', 'id', id)
            const localVarPath = `/api/street/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetIdGet', 'id', id)
            const localVarPath = `/api/street/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Routes / WayPoints coordinates example (At least 2 points are required because it is a LineString):     {      \"route\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,              -74.005974            ],            [              40.713776,              -74.006974             ]          ]        },        \"wayPoints\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,             -74.005974            ],            [              40.713776,              -74.006974            ],            [              40.714776,              -74.007974            ]        ]      }    }
         * @summary Carefully with Route and WayPoints coordinates
         * @param {number} id 
         * @param {UpdateStreetRequestDto} [updateStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdPut: async (id: number, updateStreetRequestDto?: UpdateStreetRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetIdPut', 'id', id)
            const localVarPath = `/api/street/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStreetRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetUserSearchGet: async (searchParam?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street/userSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchParam !== undefined) {
                localVarQueryParameter['searchParam'] = searchParam;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreetApi - functional programming interface
 * @export
 */
export const StreetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Carefully with Route and WayPoints coordinates
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetAdminCreatePost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetAdminCreatePost(createStreetRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetAdminCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetAdminSearchGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetAdminSearchGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetAdminSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Routes / WayPoints coordinates example (At least 2 points are required because it is a LineString):     {      \"route\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,              -74.005974            ],            [              40.713776,              -74.006974             ]          ]        },        \"wayPoints\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,             -74.005974            ],            [              40.713776,              -74.006974            ],            [              40.714776,              -74.007974            ]        ]      }    }
         * @summary Carefully with Route and WayPoints coordinates
         * @param {number} id 
         * @param {UpdateStreetRequestDto} [updateStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetIdPut(id: number, updateStreetRequestDto?: UpdateStreetRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetIdPut(id, updateStreetRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetUserSearchGet(searchParam?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetUserSearchGet(searchParam, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetUserSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreetApi - factory interface
 * @export
 */
export const StreetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreetApiFp(configuration)
    return {
        /**
         * 
         * @summary Carefully with Route and WayPoints coordinates
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetAdminCreatePost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetAdminCreatePost(createStreetRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetAdminSearchGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetAdminSearchGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Routes / WayPoints coordinates example (At least 2 points are required because it is a LineString):     {      \"route\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,              -74.005974            ],            [              40.713776,              -74.006974             ]          ]        },        \"wayPoints\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,             -74.005974            ],            [              40.713776,              -74.006974            ],            [              40.714776,              -74.007974            ]        ]      }    }
         * @summary Carefully with Route and WayPoints coordinates
         * @param {number} id 
         * @param {UpdateStreetRequestDto} [updateStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdPut(id: number, updateStreetRequestDto?: UpdateStreetRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetIdPut(id, updateStreetRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetUserSearchGet(searchParam?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetUserSearchGet(searchParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreetApi - object-oriented interface
 * @export
 * @class StreetApi
 * @extends {BaseAPI}
 */
export class StreetApi extends BaseAPI {
    /**
     * 
     * @summary Carefully with Route and WayPoints coordinates
     * @param {CreateStreetRequestDto} [createStreetRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetAdminCreatePost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetAdminCreatePost(createStreetRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [streetName] 
     * @param {string} [streetType] 
     * @param {string} [sortBy] 
     * @param {boolean} [isDecsending] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetAdminSearchGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetAdminSearchGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [streetName] 
     * @param {string} [streetType] 
     * @param {string} [sortBy] 
     * @param {boolean} [isDecsending] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Routes / WayPoints coordinates example (At least 2 points are required because it is a LineString):     {      \"route\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,              -74.005974            ],            [              40.713776,              -74.006974             ]          ]        },        \"wayPoints\": {          \"type\": \"LineString\",          \"coordinates\": [            [              40.712776,             -74.005974            ],            [              40.713776,              -74.006974            ],            [              40.714776,              -74.007974            ]        ]      }    }
     * @summary Carefully with Route and WayPoints coordinates
     * @param {number} id 
     * @param {UpdateStreetRequestDto} [updateStreetRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetIdPut(id: number, updateStreetRequestDto?: UpdateStreetRequestDto, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetIdPut(id, updateStreetRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetUserSearchGet(searchParam?: string, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetUserSearchGet(searchParam, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StreetHistoryApi - axios parameter creator
 * @export
 */
export const StreetHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/streetHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetHistoryIdDelete', 'id', id)
            const localVarPath = `/api/streetHistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetHistoryIdGet', 'id', id)
            const localVarPath = `/api/streetHistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetHistoryRequestDto} [updateStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdPut: async (id: number, updateStreetHistoryRequestDto?: UpdateStreetHistoryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetHistoryIdPut', 'id', id)
            const localVarPath = `/api/streetHistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStreetHistoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetHistoryRequestDto} [createStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryStreetIdPost: async (streetId: number, createStreetHistoryRequestDto?: CreateStreetHistoryRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'streetId' is not null or undefined
            assertParamExists('apiStreetHistoryStreetIdPost', 'streetId', streetId)
            const localVarPath = `/api/streetHistory/{streetId}`
                .replace(`{${"streetId"}}`, encodeURIComponent(String(streetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStreetHistoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreetHistoryApi - functional programming interface
 * @export
 */
export const StreetHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreetHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetHistoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetHistoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetHistoryApi.apiStreetHistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetHistoryIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetHistoryIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetHistoryApi.apiStreetHistoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetHistoryIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetHistoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetHistoryApi.apiStreetHistoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetHistoryRequestDto} [updateStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetHistoryIdPut(id: number, updateStreetHistoryRequestDto?: UpdateStreetHistoryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetHistoryIdPut(id, updateStreetHistoryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetHistoryApi.apiStreetHistoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetHistoryRequestDto} [createStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetHistoryStreetIdPost(streetId: number, createStreetHistoryRequestDto?: CreateStreetHistoryRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetHistoryStreetIdPost(streetId, createStreetHistoryRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetHistoryApi.apiStreetHistoryStreetIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreetHistoryApi - factory interface
 * @export
 */
export const StreetHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreetHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetHistoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetHistoryIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetHistoryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetHistoryRequestDto} [updateStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryIdPut(id: number, updateStreetHistoryRequestDto?: UpdateStreetHistoryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetHistoryIdPut(id, updateStreetHistoryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetHistoryRequestDto} [createStreetHistoryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetHistoryStreetIdPost(streetId: number, createStreetHistoryRequestDto?: CreateStreetHistoryRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetHistoryStreetIdPost(streetId, createStreetHistoryRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreetHistoryApi - object-oriented interface
 * @export
 * @class StreetHistoryApi
 * @extends {BaseAPI}
 */
export class StreetHistoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetHistoryApi
     */
    public apiStreetHistoryGet(options?: RawAxiosRequestConfig) {
        return StreetHistoryApiFp(this.configuration).apiStreetHistoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetHistoryApi
     */
    public apiStreetHistoryIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return StreetHistoryApiFp(this.configuration).apiStreetHistoryIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetHistoryApi
     */
    public apiStreetHistoryIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StreetHistoryApiFp(this.configuration).apiStreetHistoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateStreetHistoryRequestDto} [updateStreetHistoryRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetHistoryApi
     */
    public apiStreetHistoryIdPut(id: number, updateStreetHistoryRequestDto?: UpdateStreetHistoryRequestDto, options?: RawAxiosRequestConfig) {
        return StreetHistoryApiFp(this.configuration).apiStreetHistoryIdPut(id, updateStreetHistoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} streetId 
     * @param {CreateStreetHistoryRequestDto} [createStreetHistoryRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetHistoryApi
     */
    public apiStreetHistoryStreetIdPost(streetId: number, createStreetHistoryRequestDto?: CreateStreetHistoryRequestDto, options?: RawAxiosRequestConfig) {
        return StreetHistoryApiFp(this.configuration).apiStreetHistoryStreetIdPost(streetId, createStreetHistoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StreetImageApi - axios parameter creator
 * @export
 */
export const StreetImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/streetImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetImageIdDelete', 'id', id)
            const localVarPath = `/api/streetImage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetImageIdGet', 'id', id)
            const localVarPath = `/api/streetImage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetImageRequestDto} [updateStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdPut: async (id: number, updateStreetImageRequestDto?: UpdateStreetImageRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetImageIdPut', 'id', id)
            const localVarPath = `/api/streetImage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStreetImageRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetImageRequestDto} [createStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageStreetIdPost: async (streetId: number, createStreetImageRequestDto?: CreateStreetImageRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'streetId' is not null or undefined
            assertParamExists('apiStreetImageStreetIdPost', 'streetId', streetId)
            const localVarPath = `/api/streetImage/{streetId}`
                .replace(`{${"streetId"}}`, encodeURIComponent(String(streetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStreetImageRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreetImageApi - functional programming interface
 * @export
 */
export const StreetImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreetImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetImageGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetImageGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetImageApi.apiStreetImageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetImageIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetImageIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetImageApi.apiStreetImageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetImageIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetImageIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetImageApi.apiStreetImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetImageRequestDto} [updateStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetImageIdPut(id: number, updateStreetImageRequestDto?: UpdateStreetImageRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetImageIdPut(id, updateStreetImageRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetImageApi.apiStreetImageIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetImageRequestDto} [createStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetImageStreetIdPost(streetId: number, createStreetImageRequestDto?: CreateStreetImageRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetImageStreetIdPost(streetId, createStreetImageRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetImageApi.apiStreetImageStreetIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreetImageApi - factory interface
 * @export
 */
export const StreetImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreetImageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetImageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetImageIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetImageIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetImageRequestDto} [updateStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageIdPut(id: number, updateStreetImageRequestDto?: UpdateStreetImageRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetImageIdPut(id, updateStreetImageRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} streetId 
         * @param {CreateStreetImageRequestDto} [createStreetImageRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetImageStreetIdPost(streetId: number, createStreetImageRequestDto?: CreateStreetImageRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetImageStreetIdPost(streetId, createStreetImageRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreetImageApi - object-oriented interface
 * @export
 * @class StreetImageApi
 * @extends {BaseAPI}
 */
export class StreetImageApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetImageApi
     */
    public apiStreetImageGet(options?: RawAxiosRequestConfig) {
        return StreetImageApiFp(this.configuration).apiStreetImageGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetImageApi
     */
    public apiStreetImageIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return StreetImageApiFp(this.configuration).apiStreetImageIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetImageApi
     */
    public apiStreetImageIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StreetImageApiFp(this.configuration).apiStreetImageIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateStreetImageRequestDto} [updateStreetImageRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetImageApi
     */
    public apiStreetImageIdPut(id: number, updateStreetImageRequestDto?: UpdateStreetImageRequestDto, options?: RawAxiosRequestConfig) {
        return StreetImageApiFp(this.configuration).apiStreetImageIdPut(id, updateStreetImageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} streetId 
     * @param {CreateStreetImageRequestDto} [createStreetImageRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetImageApi
     */
    public apiStreetImageStreetIdPost(streetId: number, createStreetImageRequestDto?: CreateStreetImageRequestDto, options?: RawAxiosRequestConfig) {
        return StreetImageApiFp(this.configuration).apiStreetImageStreetIdPost(streetId, createStreetImageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StreetTypeApi - axios parameter creator
 * @export
 */
export const StreetTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/streetType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetTypeIdDelete', 'id', id)
            const localVarPath = `/api/streetType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetTypeIdGet', 'id', id)
            const localVarPath = `/api/streetType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetTypeRequestDto} [updateStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdPut: async (id: number, updateStreetTypeRequestDto?: UpdateStreetTypeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetTypeIdPut', 'id', id)
            const localVarPath = `/api/streetType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStreetTypeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateStreetTypeRequestDto} [createStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypePost: async (createStreetTypeRequestDto?: CreateStreetTypeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/streetType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStreetTypeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreetTypeApi - functional programming interface
 * @export
 */
export const StreetTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreetTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetTypeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetTypeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetTypeApi.apiStreetTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetTypeIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetTypeIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetTypeApi.apiStreetTypeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetTypeIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetTypeIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetTypeApi.apiStreetTypeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetTypeRequestDto} [updateStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetTypeIdPut(id: number, updateStreetTypeRequestDto?: UpdateStreetTypeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetTypeIdPut(id, updateStreetTypeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetTypeApi.apiStreetTypeIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateStreetTypeRequestDto} [createStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetTypePost(createStreetTypeRequestDto?: CreateStreetTypeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetTypePost(createStreetTypeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetTypeApi.apiStreetTypePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreetTypeApi - factory interface
 * @export
 */
export const StreetTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreetTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetTypeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetTypeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateStreetTypeRequestDto} [updateStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypeIdPut(id: number, updateStreetTypeRequestDto?: UpdateStreetTypeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetTypeIdPut(id, updateStreetTypeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateStreetTypeRequestDto} [createStreetTypeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetTypePost(createStreetTypeRequestDto?: CreateStreetTypeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetTypePost(createStreetTypeRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreetTypeApi - object-oriented interface
 * @export
 * @class StreetTypeApi
 * @extends {BaseAPI}
 */
export class StreetTypeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetTypeApi
     */
    public apiStreetTypeGet(options?: RawAxiosRequestConfig) {
        return StreetTypeApiFp(this.configuration).apiStreetTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetTypeApi
     */
    public apiStreetTypeIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return StreetTypeApiFp(this.configuration).apiStreetTypeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetTypeApi
     */
    public apiStreetTypeIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StreetTypeApiFp(this.configuration).apiStreetTypeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateStreetTypeRequestDto} [updateStreetTypeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetTypeApi
     */
    public apiStreetTypeIdPut(id: number, updateStreetTypeRequestDto?: UpdateStreetTypeRequestDto, options?: RawAxiosRequestConfig) {
        return StreetTypeApiFp(this.configuration).apiStreetTypeIdPut(id, updateStreetTypeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateStreetTypeRequestDto} [createStreetTypeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetTypeApi
     */
    public apiStreetTypePost(createStreetTypeRequestDto?: CreateStreetTypeRequestDto, options?: RawAxiosRequestConfig) {
        return StreetTypeApiFp(this.configuration).apiStreetTypePost(createStreetTypeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



