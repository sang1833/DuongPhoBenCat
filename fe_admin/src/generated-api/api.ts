/* tslint:disable */
/* eslint-disable */
/**
 * be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateStreetRequestDto
 */
export interface CreateStreetRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'streetName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'streetType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateStreetRequestDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof CreateStreetRequestDto
     */
    'route'?: GeoJsonLineStringDto;
    /**
     * 
     * @type {GeoJsonLineStringDto}
     * @memberof CreateStreetRequestDto
     */
    'wayPoints'?: GeoJsonLineStringDto;
}
/**
 * 
 * @export
 * @interface DateOnly
 */
export interface DateOnly {
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'day'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof DateOnly
     */
    'dayOfWeek'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayOfYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayNumber'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


/**
 * 
 * @export
 * @interface GeoJsonLineStringDto
 */
export interface GeoJsonLineStringDto {
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof GeoJsonLineStringDto
     */
    'coordinates'?: Array<Array<number>> | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {DateOnly}
     * @memberof WeatherForecast
     */
    'date'?: DateOnly;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
}

/**
 * StreetApi - axios parameter creator
 * @export
 */
export const StreetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetGet: async (streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streetName !== undefined) {
                localVarQueryParameter['StreetName'] = streetName;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['StreetType'] = streetType;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (isDecsending !== undefined) {
                localVarQueryParameter['IsDecsending'] = isDecsending;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStreetIdGet', 'id', id)
            const localVarPath = `/api/street/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetPost: async (createStreetRequestDto?: CreateStreetRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/street`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStreetRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreetApi - functional programming interface
 * @export
 */
export const StreetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStreetPost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStreetPost(createStreetRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreetApi.apiStreetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreetApi - factory interface
 * @export
 */
export const StreetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreetApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDecsending] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateStreetRequestDto} [createStreetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStreetPost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStreetPost(createStreetRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreetApi - object-oriented interface
 * @export
 * @class StreetApi
 * @extends {BaseAPI}
 */
export class StreetApi extends BaseAPI {
    /**
     * 
     * @param {string} [streetName] 
     * @param {string} [streetType] 
     * @param {string} [sortBy] 
     * @param {boolean} [isDecsending] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetGet(streetName?: string, streetType?: string, sortBy?: string, isDecsending?: boolean, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetGet(streetName, streetType, sortBy, isDecsending, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetIdGet(id: number, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateStreetRequestDto} [createStreetRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreetApi
     */
    public apiStreetPost(createStreetRequestDto?: CreateStreetRequestDto, options?: RawAxiosRequestConfig) {
        return StreetApiFp(this.configuration).apiStreetPost(createStreetRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWeatherForecastGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWeatherForecastGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWeatherForecastGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeatherForecastApi.apiWeatherForecastGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWeatherForecastGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.apiWeatherForecastGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public apiWeatherForecastGet(options?: RawAxiosRequestConfig) {
        return WeatherForecastApiFp(this.configuration).apiWeatherForecastGet(options).then((request) => request(this.axios, this.basePath));
    }
}



